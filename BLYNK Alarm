#define BLYNK_PRINT Serial // Mengaktifkan debugging Blynk ke Serial Monitor

#include <ESP8266WiFi.h> // Untuk ESP8266
// #include <WiFi.h>     // Gunakan ini untuk ESP32
#include <BlynkSimpleEsp8266.h> // Untuk ESP8266
// #include <BlynkSimpleEsp32.h> // Gunakan ini untuk ESP32
#include <DHT.h>       // Library untuk sensor DHT

// --- Konfigurasi Blynk ---
char auth[] = "YOUR_BLYNK_AUTH_TOKEN"; // GANTI DENGAN AUTH TOKEN RAJA IBLIS
char ssid[] = "YOUR_WIFI_SSID";       // GANTI DENGAN NAMA WIFI RAJA IBLIS
char pass[] = "YOUR_WIFI_PASSWORD";   // GANTI DENGAN PASSWORD WIFI RAJA IBLIS

// --- Konfigurasi Hardware ---
#define DHTPIN 2    // Pin data DHT11 terhubung (GPIO2 pada ESP8266/ESP32)
#define DHTTYPE DHT11 // Tipe sensor: DHT11

#define BUZZER D3    // Pin buzzer terhubung (GPIO3 pada ESP8266/ESP32)
#define LED_PIN D4   // Pin LED terhubung (GPIO4 pada ESP8266/ESP32)

// Pin virtual Blynk untuk komunikasi data
#define VIRTUAL_PIN_TEMP V5 // Pin virtual untuk mengirim data suhu ke Blynk
#define VIRTUAL_PIN_STATUS V6 // Pin virtual untuk mengirim status (AMAN/WASPADA/KEBAKARAN)

DHT dht(DHTPIN, DHTTYPE); // Inisialisasi objek DHT

BlynkTimer timer; // Objek timer untuk membaca sensor secara berkala

void sendSensorData() {
  float temp = dht.readTemperature(); // Baca suhu dari sensor

  if (isnan(temp)) {
    Serial.println("Sensor error! Tidak dapat membaca suhu.");
    Blynk.virtualWrite(VIRTUAL_PIN_TEMP, 0); // Kirim 0 atau nilai default jika error
    Blynk.virtualWrite(VIRTUAL_PIN_STATUS, "Sensor Error!"); // Kirim status error
    noTone(BUZZER);
    digitalWrite(LED_PIN, LOW);
    return; // Keluar dari fungsi
  }

  // Kirim suhu ke Blynk
  Blynk.virtualWrite(VIRTUAL_PIN_TEMP, temp);
  Serial.print("Suhu: ");
  Serial.print(temp);
  Serial.print("C - Status: ");

  // Logika peringatan berdasarkan suhu
  if (temp > 32) {
    digitalWrite(LED_PIN, HIGH);
    Blynk.virtualWrite(VIRTUAL_PIN_STATUS, "KEBAKARAN!!!"); // Kirim status ke Blynk
    Blynk.notify("PERINGATAN: KEBAKARAN TERDETEKSI! Suhu: " + String(temp) + "C"); // Kirim notifikasi
    Serial.println("KEBAKARAN!!!");
    for (int i = 0; i < 2; i++) { // Mengurangi jumlah bunyi agar tidak terlalu lama
      tone(BUZZER, 1000);
      delay(250);
      tone(BUZZER, 1500);
      delay(250);
    }
    noTone(BUZZER);
  } else if (temp > 26) {
    digitalWrite(LED_PIN, LOW);
    Blynk.virtualWrite(VIRTUAL_PIN_STATUS, "WASPADA"); // Kirim status ke Blynk
    Serial.println("WASPADA");
    tone(BUZZER, 1000);
    delay(500);
    noTone(BUZZER);
  } else {
    digitalWrite(LED_PIN, LOW);
    Blynk.virtualWrite(VIRTUAL_PIN_STATUS, "AMAN"); // Kirim status ke Blynk
    noTone(BUZZER);
    Serial.println("AMAN");
  }
}

void setup() {
  Serial.begin(9600); // Mulai komunikasi serial
  dht.begin();        // Mulai sensor DHT

  pinMode(BUZZER, OUTPUT);
  pinMode(LED_PIN, OUTPUT);

  // Koneksi ke Blynk
  Blynk.begin(auth, ssid, pass);
  Serial.println("Menghubungkan ke Blynk...");

  // Setup timer untuk menjalankan sendSensorData setiap 3 detik
  // DHT11 membutuhkan delay minimal 1-2 detik antar pembacaan
  timer.setInterval(3000L, sendSensorData);

  Serial.println("Sistem Siaga Api (Blynk) Dimulai!");
}

void loop() {
  Blynk.run(); // Menjalankan semua operasi Blynk (termasuk koneksi dan komunikasi)
  timer.run(); // Menjalankan timer yang kita definisikan
  // Tidak ada delay() di loop utama agar Blynk.run() tidak terblokir
}
